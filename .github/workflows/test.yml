name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests weekly on Sunday at 00:00 UTC
    - cron: '0 0 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.13"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Create virtual environment (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m venv .venv
        .venv\Scripts\Activate.ps1
        python -m pip install --upgrade pip
        # Install core package and basic extras
        pip install -e ".[dev,test,cli]"
        # Install optional dependencies explicitly for testing
        echo "Installing optional dependencies..."
        pip install bioframe>=0.4.0 || exit 1
        pip install sqlalchemy>=2.0.0 || exit 1
        pip install duckdb>=0.9.0 || exit 1
        pip install ollama>=0.1.7 || exit 1
        pip install prompt-toolkit>=3.0.0 || exit 1
        # Verify installations
        echo "Verifying installations..."
        python -c "import bioframe; print('INSTALLED bioframe:', bioframe.__version__)"
        python -c "import sqlalchemy; print('INSTALLED sqlalchemy:', sqlalchemy.__version__)"
        python -c "import duckdb; print('INSTALLED duckdb:', duckdb.__version__)"
        echo "All dependencies installed successfully!"
      shell: pwsh

    - name: Create virtual environment and install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        python -m venv .venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        python -m pip install --upgrade pip
        # Install core package and basic extras
        pip install -e ".[dev,test,cli]"
        # Install optional dependencies explicitly for testing
        echo "Installing optional dependencies..."
        pip install bioframe>=0.4.0 || exit 1
        pip install sqlalchemy>=2.0.0 || exit 1
        pip install duckdb>=0.9.0 || exit 1
        pip install ollama>=0.1.7 || exit 1
        pip install prompt-toolkit>=3.0.0 || exit 1
        # Verify installations
        echo "Verifying installations..."
        python -c "import bioframe; print('INSTALLED bioframe:', bioframe.__version__)"
        python -c "import sqlalchemy; print('INSTALLED sqlalchemy:', sqlalchemy.__version__)"
        python -c "import duckdb; print('INSTALLED duckdb:', duckdb.__version__)"
        echo "All dependencies installed successfully!"
      shell: bash

    - name: Install package (already done above)
      if: false
      run: echo "Package installation is done in venv creation step"

    - name: Verify installation (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        python -c "import parquetframe; print('ParquetFrame imported successfully')"
      shell: pwsh

    - name: Verify installation (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -c "import parquetframe; print('ParquetFrame imported successfully')"
      shell: bash

    - name: Run basic functionality test (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        python test_basic.py
      shell: pwsh

    - name: Run basic functionality test (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python test_basic.py
      shell: bash

    - name: Test CLI functionality (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        python -c "import pandas as pd; df = pd.DataFrame({'id': range(50), 'name': [f'user_{i}' for i in range(50)], 'age': [20 + (i % 50) for i in range(50)]}); df.to_parquet('cli_test_data.parquet')"
        pframe --help
        pframe info cli_test_data.parquet
        pframe run cli_test_data.parquet --head 3
        pframe run cli_test_data.parquet --query "age > 30" --columns "name,age" --head 2
      shell: pwsh

    - name: Test CLI functionality (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -c "import pandas as pd; df = pd.DataFrame({'id': range(50), 'name': [f'user_{i}' for i in range(50)], 'age': [20 + (i % 50) for i in range(50)]}); df.to_parquet('cli_test_data.parquet')"
        pframe --help
        pframe info cli_test_data.parquet
        pframe run cli_test_data.parquet --head 3
        pframe run cli_test_data.parquet --query "age > 30" --columns "name,age" --head 2
      shell: bash

    - name: Run linting (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        ruff check src/ tests/
        black --check --diff src/ tests/
      continue-on-error: true
      shell: pwsh

    - name: Run linting (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        ruff check src/ tests/
        black --check --diff src/ tests/
      continue-on-error: true
      shell: bash

    - name: Run type checking (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        mypy src/parquetframe
      continue-on-error: true
      shell: pwsh

    - name: Run type checking (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        mypy src/parquetframe
      continue-on-error: true
      shell: bash

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        python -m pytest tests/ --cov=src/parquetframe --cov-report=xml --cov-report=html --tb=short -v --cov-fail-under=45
      shell: pwsh

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -m pytest tests/ --cov=src/parquetframe --cov-report=xml --cov-report=html --tb=short -v --cov-fail-under=45
      shell: bash

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - uses: pre-commit/action@v3.0.1

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv and dependencies
      run: |
        pip install uv
        uv venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        uv pip install bandit[toml]
    - name: Run security checks
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    - name: Install build dependencies
      run: |
        uv venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        uv pip install build twine
    - name: Build package
      run: |
        python -m build
    - name: Check package
      run: |
        twine check dist/*
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  cli-specific-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    - name: Install CLI dependencies only
      run: |
        uv venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        uv pip install -e ".[cli]"
    - name: Test CLI functionality
      run: |
        # Create test data
        python -c "
        import pandas as pd
        df = pd.DataFrame({
            'id': range(100),
            'name': [f'test_user_{i}' for i in range(100)],
            'age': [18 + (i % 60) for i in range(100)],
            'city': ['NYC', 'LA', 'Chicago', 'Boston'] * 25,
            'score': [i * 0.7 for i in range(100)]
        })
        df.to_parquet('cli_integration_test.parquet')
        "

        # Comprehensive CLI testing
        pframe --version
        pframe --help

        # Info command
        pframe info cli_integration_test.parquet

        # Basic run command
        pframe run cli_integration_test.parquet --head 5

        # Complex operations
        pframe run cli_integration_test.parquet --query "age > 30 and city == 'NYC'" --columns "name,age,score" --head 3
        pframe run cli_integration_test.parquet --describe
        pframe run cli_integration_test.parquet --info

        # Test with output and script generation
        pframe run cli_integration_test.parquet --query "age < 25" --output "young_users.parquet" --save-script "young_analysis.py"

        # Verify outputs were created
        ls -la young_users.parquet young_analysis.py

        # Test backend forcing
        pframe run cli_integration_test.parquet --force-pandas --sample 3
    - name: Run CLI-specific tests
      run: |
        uv pip install pytest pytest-mock pytest-cov
        python -m pytest tests/test_cli.py -v --tb=short || echo "CLI tests completed (some may have failed)"

  minimum-requirements:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'  # Test minimum supported version
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    - name: Install minimum requirements
      run: |
        uv venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        # Install minimum versions specified in pyproject.toml
        uv pip install "pandas>=2.0.0,<2.1" "dask[dataframe]>=2023.1.0,<2024" "pyarrow>=10.0.0,<11" "numpy>=1.21.0,<1.25"
        uv pip install "pytest>=7.0" "pytest-cov>=4.0"
        uv pip install -e . --no-deps
    - name: Test with minimum requirements
      run: |
        # Test only core functionality with minimum dependencies
        python -m pytest tests/test_datacontext.py::TestDataContextFactory -x -v --cov=src/parquetframe/core --cov=src/parquetframe/datacontext --cov-fail-under=5 || echo "Core tests completed"
        # Also run basic import test
        python -c "import parquetframe; print('✅ Core package import successful')"
