name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # For trusted publishing to PyPI

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        uv pip install -e ".[dev,test,cli]"
    - name: Run comprehensive tests
      run: |
        python test_basic.py
        pytest tests/ --cov=src/parquetframe --cov-fail-under=50 -x
    - name: Test CLI functionality
      run: |
        python -c "
        import pandas as pd
        df = pd.DataFrame({
            'id': range(50),
            'name': [f'test_user_{i}' for i in range(50)],
            'age': [18 + (i % 50) for i in range(50)]
        })
        df.to_parquet('release_test.parquet')
        "
        pframe --version
        pframe info release_test.parquet
        pframe run release_test.parquet --head 3
    - name: Run linting
      run: |
        ruff check src/ tests/
        black --check src/ tests/
    - name: Run type checking
      run: |
        mypy src/parquetframe
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install build dependencies
      run: |
        uv venv
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        source .venv/bin/activate
        uv pip install build twine tomli toml

    - name: Verify version matches tag
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        # Use tomli for Python < 3.11 compatibility
        PACKAGE_VERSION=$(python -c "import sys; import tomli if sys.version_info < (3,11) else tomllib as tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "Tag version: $TAG_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "❌ Version mismatch! Tag: $TAG_VERSION, Package: $PACKAGE_VERSION"
          exit 1
        fi
        echo "✅ Version verified: $TAG_VERSION"

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing - no API key needed
        # Configure at https://pypi.org/manage/account/publishing/
        print-hash: true
        skip-existing: true

  publish-test-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write  # For trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/
        skip-existing: true

  create-github-release:
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      run: |
        # Extract changelog section for this version
        VERSION="${{ steps.version.outputs.VERSION }}"
        awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md || echo "Release notes not found" > release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: false
        generate_release_notes: true

  announce:
    needs: [publish-pypi, create-github-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && success()
    steps:
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Announce release (placeholder)
      run: |
        echo "🎉 ParquetFrame ${{ steps.version.outputs.VERSION }} has been released!"
        echo "📦 Available on PyPI: https://pypi.org/project/parquetframe/${{ steps.version.outputs.VERSION }}/"
        echo "📖 Release notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"

        # In a real project, you might want to:
        # - Send notifications to Discord/Slack
        # - Post on social media
        # - Update documentation
        # - Send emails to subscribers
