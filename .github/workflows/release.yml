name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # For trusted publishing to PyPI

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev,test]"
    - name: Run tests
      run: |
        pytest --cov=parquetframe --cov-fail-under=95
    - name: Run linting
      run: |
        ruff check src/ tests/
        black --check src/ tests/
    - name: Run type checking
      run: |
        mypy src/parquetframe

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      
    - name: Install build dependencies
      run: |
        uv pip install --system build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        ls -la dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    environment: release
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing - no API key needed
        # Configure at https://pypi.org/manage/account/publishing/
        packages-dir: dist/
        skip-existing: true
        
  publish-test-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/
        skip-existing: true

  create-github-release:
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Extract changelog
      id: changelog
      run: |
        # Extract changelog section for this version
        VERSION="${{ steps.version.outputs.VERSION }}"
        awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md || echo "Release notes not found" > release_notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: false
        generate_release_notes: true

  announce:
    needs: [publish-pypi, create-github-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && success()
    steps:
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Announce release (placeholder)
      run: |
        echo "ðŸŽ‰ ParquetFrame ${{ steps.version.outputs.VERSION }} has been released!"
        echo "ðŸ“¦ Available on PyPI: https://pypi.org/project/parquetframe/${{ steps.version.outputs.VERSION }}/"
        echo "ðŸ“– Release notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"
        
        # In a real project, you might want to:
        # - Send notifications to Discord/Slack
        # - Post on social media
        # - Update documentation
        # - Send emails to subscribers